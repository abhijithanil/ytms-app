package com.insp17.ytms.entity;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Entity
@Table(name = "video_metadata")
@Getter
@Setter
@ToString(exclude = {"videoTask", "videoChapters", "revision", "rawVideo"})
@NoArgsConstructor
@AllArgsConstructor
public class VideoMetadata {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // UPDATED: Support for both task-level and specific video metadata
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "video_task_id")
    private VideoTask videoTask;

    // NEW: Link to specific revision (for revision-specific metadata)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "revision_id")
    private Revision revision;

    // NEW: Link to specific raw video (for raw video-specific metadata)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "raw_video_id")
    private RawVideo rawVideo;

    // Basic Video Information
    @Column(nullable = false, length = 100)
    private String title;

    @Column(columnDefinition = "TEXT")
    private String description;

    @ElementCollection(fetch = FetchType.EAGER)
    @Column(name = "tag")
    private Set<String> tags = new HashSet<>();

    @Column(name = "thumbnail_url")
    private String thumbnailUrl;

    @Column(nullable = false, length = 50)
    private String category = "Entertainment";

    @Column(nullable = false, length = 10)
    private String language = "en";

    // Privacy and Restrictions
    @Column(name = "privacy_status", nullable = false, length = 20)
    private String privacyStatus = "PUBLIC";

    @Column(name = "age_restriction")
    private Boolean ageRestriction = false;

    @Column(name = "made_for_kids")
    private Boolean madeForKids = false;

    // Recording Details
    @Column(name = "location_description")
    private String locationDescription;

    @Column(name = "recording_date")
    private LocalDate recordingDate;

    // Licensing
    @Column(nullable = false)
    private String license = "YouTube Standard License";

    // NEW: YouTube Channel selection
    @Column(name = "youtube_channel_id")
    private String youtubeChannelId;

    @Column(name = "youtube_channel_name")
    private String youtubeChannelName;

    // NEW: Video type for shorts support
    @Enumerated(EnumType.STRING)
    @Column(name = "video_type")
    private VideoType videoType = VideoType.MAIN;

    // NEW: Shorts-specific metadata
    @Column(name = "is_short")
    private Boolean isShort = false;

    @Column(name = "short_hashtags")
    private String shortHashtags;

    // NEW: Additional YouTube Settings (from frontend form)
    @Column(name = "monetization")
    private Boolean monetization = true;

    @Column(name = "comments_enabled")
    private Boolean commentsEnabled = true;

    @Column(name = "ratings_enabled")
    private Boolean ratingsEnabled = true;

    @Column(name = "scheduled_publish_time")
    private LocalDateTime scheduledPublishTime;

    // NEW: Playlist management
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "video_metadata_playlists", joinColumns = @JoinColumn(name = "video_metadata_id"))
    @Column(name = "playlist_id")
    private Set<String> playlistIds = new HashSet<>();

    // NEW: Advanced YouTube Features
    @Column(name = "end_screen", columnDefinition = "TEXT")
    private String endScreen;

    @Column(name = "cards", columnDefinition = "TEXT")
    private String cards;

    @Column(name = "custom_thumbnail_url")
    private String customThumbnailUrl;

    // NEW: SEO and Discoverability
    @ElementCollection(fetch = FetchType.EAGER)
    @CollectionTable(name = "video_metadata_keywords", joinColumns = @JoinColumn(name = "video_metadata_id"))
    @Column(name = "keyword")
    private Set<String> keywords = new HashSet<>();

    // NEW: Captions and Subtitles
    @Column(name = "auto_generated_captions")
    private Boolean autoGeneratedCaptions = true;

    @Column(name = "default_audio_language")
    private String defaultAudioLanguage = "en";

    // NEW: Publishing Options
    @Column(name = "notify_subscribers")
    private Boolean notifySubscribers = true;

    @Column(name = "publish_to_feed")
    private Boolean publishToFeed = true;

    // NEW: Content Rating
    @Column(name = "content_rating")
    private String contentRating;

    // NEW: Geographic Information
    @Column(name = "recording_location")
    private String recordingLocation;

    @Column(name = "video_latitude")
    private Double videoLatitude;

    @Column(name = "video_longitude")
    private Double videoLongitude;

    // NEW: Video Statistics Options
    @Column(name = "public_stats_viewable")
    private Boolean publicStatsViewable = true;

    // NEW: Community Settings
    @Column(name = "allow_embedding")
    private Boolean allowEmbedding = true;

    @Column(name = "allow_video_responses")
    private Boolean allowVideoResponses = false;

    // Video Chapters
    @OneToMany(mappedBy = "videoMetadata", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)
    @JsonManagedReference
    private List<VideoChapter> videoChapters = new ArrayList<>();

    // Timestamps
    @CreationTimestamp
    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    // Convenience methods for chapters
    public void addChapter(VideoChapter chapter) {
        videoChapters.add(chapter);
        chapter.setVideoMetadata(this);
    }

    public void removeChapter(VideoChapter chapter) {
        videoChapters.remove(chapter);
        chapter.setVideoMetadata(null);
    }

    // Convenience methods for playlists
    public void addPlaylistId(String playlistId) {
        if (playlistIds == null) {
            playlistIds = new HashSet<>();
        }
        playlistIds.add(playlistId);
    }

    public void removePlaylistId(String playlistId) {
        if (playlistIds != null) {
            playlistIds.remove(playlistId);
        }
    }

    // Convenience methods for keywords
    public void addKeyword(String keyword) {
        if (keywords == null) {
            keywords = new HashSet<>();
        }
        keywords.add(keyword);
    }

    public void removeKeyword(String keyword) {
        if (keywords != null) {
            keywords.remove(keyword);
        }
    }

    // Helper methods to determine what this metadata is for
    public boolean isForRevision() {
        return revision != null;
    }

    public boolean isForRawVideo() {
        return rawVideo != null;
    }

    public boolean isForTask() {
        return revision == null && rawVideo == null;
    }

    // Get the target identifier for this metadata
    public String getTargetIdentifier() {
        if (revision != null) {
            return "revision-" + revision.getId();
        }
        if (rawVideo != null) {
            return "rawvideo-" + rawVideo.getId();
        }
        return "task-" + videoTask.getId();
    }

    // Helper method to check if this is short-form content
    public boolean isShortFormContent() {
        return Boolean.TRUE.equals(isShort) || videoType == VideoType.SHORT;
    }

    // Helper method to get all tags including hashtags for shorts
    public Set<String> getAllTags() {
        Set<String> allTags = new HashSet<>();
        if (tags != null) {
            allTags.addAll(tags);
        }
        if (shortHashtags != null && !shortHashtags.trim().isEmpty()) {
            // Parse hashtags from comma-separated string
            String[] hashtags = shortHashtags.split(",");
            for (String hashtag : hashtags) {
                String trimmed = hashtag.trim();
                if (!trimmed.isEmpty()) {
                    // Ensure hashtag starts with #
                    if (!trimmed.startsWith("#")) {
                        trimmed = "#" + trimmed;
                    }
                    allTags.add(trimmed);
                }
            }
        }
        return allTags;
    }

    // Helper method to check if video is scheduled
    public boolean isScheduled() {
        return scheduledPublishTime != null && scheduledPublishTime.isAfter(LocalDateTime.now());
    }

    // Helper method to get effective privacy status
    public String getEffectivePrivacyStatus() {
        if (isScheduled()) {
            return "SCHEDULED";
        }
        return privacyStatus != null ? privacyStatus : "PUBLIC";
    }
}