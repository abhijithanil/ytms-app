package com.insp17.ytms.dtos;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Set;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class VideoMetadataDTO {

    // Basic Video Information
    @NotBlank(message = "Title is required")
    @Size(max = 100, message = "Title must not exceed 100 characters")
    private String title;

    @NotBlank(message = "Description is required")
    private String description;

    private Set<String> tags;

    @JsonProperty("thumbnail_url")
    private String thumbnailUrl;

    private String category;

    private String language;

    // Privacy and Restrictions
    @JsonProperty("privacy_status")
    private String privacyStatus;

    @JsonProperty("age_restriction")
    private Boolean ageRestriction = false;

    @JsonProperty("made_for_kids")
    private Boolean madeForKids = false;

    // Recording Details
    @JsonProperty("location_description")
    private String locationDescription;

    @JsonProperty("recording_date")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private LocalDate recordingDate;

    // Licensing
    private String license;

    // YouTube Channel Selection
    @JsonProperty("youtube_channel_id")
    private String youtubeChannelId;

    @JsonProperty("youtube_channel_name")
    private String youtubeChannelName;

    // Video Type and Shorts Support
    @JsonProperty("video_type")
    private String videoType;

    @JsonProperty("is_short")
    private Boolean isShort = false;

    @JsonProperty("short_hashtags")
    private String shortHashtags;

    // YouTube Settings
    private Boolean monetization = true;

    @JsonProperty("comments_enabled")
    private Boolean commentsEnabled = true;

    @JsonProperty("ratings_enabled")
    private Boolean ratingsEnabled = true;

    @JsonProperty("scheduled_publish_time")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private LocalDateTime scheduledPublishTime;

    // Playlist Management
    @JsonProperty("playlist_ids")
    private Set<String> playlistIds;

    // Advanced YouTube Features
    @JsonProperty("end_screen")
    private String endScreen;

    private String cards;

    @JsonProperty("custom_thumbnail_url")
    private String customThumbnailUrl;

    // SEO and Discoverability
    private Set<String> keywords;

    // Captions and Subtitles
    @JsonProperty("auto_generated_captions")
    private Boolean autoGeneratedCaptions = true;

    @JsonProperty("default_audio_language")
    private String defaultAudioLanguage = "en";

    // Publishing Options
    @JsonProperty("notify_subscribers")
    private Boolean notifySubscribers = true;

    @JsonProperty("publish_to_feed")
    private Boolean publishToFeed = true;

    // Content Rating
    @JsonProperty("content_rating")
    private String contentRating;

    // Geographic Information
    @JsonProperty("recording_location")
    private String recordingLocation;

    @JsonProperty("video_latitude")
    private Double videoLatitude;

    @JsonProperty("video_longitude")
    private Double videoLongitude;

    // Video Statistics Options
    @JsonProperty("public_stats_viewable")
    private Boolean publicStatsViewable = true;

    // Community Settings
    @JsonProperty("allow_embedding")
    private Boolean allowEmbedding = true;

    @JsonProperty("allow_video_responses")
    private Boolean allowVideoResponses = false;

    // Video Chapters
    @JsonProperty("video_chapters")
    private List<VideoChapterDTO> videoChapters;

    // Legacy support for recording details (for backward compatibility)
    @JsonProperty("recording_details")
    private RecordingDetailsDTO recordingDetails;

    // Helper method to merge recording details into main fields
    public void mergeRecordingDetails() {
        if (recordingDetails != null) {
            if (this.locationDescription == null) {
                this.locationDescription = recordingDetails.getLocationDescription();
            }
            if (this.recordingDate == null) {
                this.recordingDate = recordingDetails.getRecordingDate();
            }
        }
    }

    // Helper method to create recording details from main fields
    public void createRecordingDetails() {
        if (recordingDetails == null && (locationDescription != null || recordingDate != null)) {
            recordingDetails = new RecordingDetailsDTO(locationDescription, recordingDate);
        }
    }

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    public static class RecordingDetailsDTO {
        @JsonProperty("location_description")
        private String locationDescription;

        @JsonProperty("recording_date")
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
        private LocalDate recordingDate;
    }
}