package com.insp17.ytms.components;

import com.insp17.ytms.dtos.VideoChapterDTO;
import com.insp17.ytms.dtos.VideoMetadataDTO;
import com.insp17.ytms.entity.VideoChapter;
import com.insp17.ytms.entity.VideoMetadata;
import com.insp17.ytms.entity.VideoType;
import org.springframework.stereotype.Component;

import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

@Component
public class VideoMetadataMapper {

    /**
     * Converts a VideoMetadata entity to a VideoMetadataDTO.
     *
     * @param entity The VideoMetadata entity to convert.
     * @return The corresponding VideoMetadataDTO, or null if the entity is null.
     */
    public VideoMetadataDTO toDTO(VideoMetadata entity) {
        if (entity == null) {
            return null;
        }

        VideoMetadataDTO dto = new VideoMetadataDTO();

        // Basic Video Information
        dto.setTitle(entity.getTitle());
        dto.setDescription(entity.getDescription());
        dto.setTags(entity.getTags());
        dto.setThumbnailUrl(entity.getThumbnailUrl());
        dto.setCategory(entity.getCategory());
        dto.setLanguage(entity.getLanguage());

        // Privacy and Restrictions
        dto.setPrivacyStatus(entity.getPrivacyStatus());
        dto.setAgeRestriction(entity.getAgeRestriction());
        dto.setMadeForKids(entity.getMadeForKids());

        // Recording Details
        dto.setLocationDescription(entity.getLocationDescription());
        dto.setRecordingDate(entity.getRecordingDate());

        // Licensing
        dto.setLicense(entity.getLicense());

        // YouTube Channel Selection
        dto.setYoutubeChannelId(entity.getYoutubeChannelId());
        dto.setYoutubeChannelName(entity.getYoutubeChannelName());

        // Video Type and Shorts Support
        dto.setVideoType(entity.getVideoType() != null ? entity.getVideoType().name() : null);
        dto.setIsShort(entity.getIsShort());
        dto.setShortHashtags(entity.getShortHashtags());

        // YouTube Settings
        dto.setMonetization(entity.getMonetization());
        dto.setCommentsEnabled(entity.getCommentsEnabled());
        dto.setRatingsEnabled(entity.getRatingsEnabled());
        dto.setScheduledPublishTime(entity.getScheduledPublishTime());

        // Playlist Management
        dto.setPlaylistIds(entity.getPlaylistIds());

        // Advanced YouTube Features
        dto.setEndScreen(entity.getEndScreen());
        dto.setCards(entity.getCards());
        dto.setCustomThumbnailUrl(entity.getCustomThumbnailUrl());

        // SEO and Discoverability
        dto.setKeywords(entity.getKeywords());

        // Captions and Subtitles
        dto.setAutoGeneratedCaptions(entity.getAutoGeneratedCaptions());
        dto.setDefaultAudioLanguage(entity.getDefaultAudioLanguage());

        // Publishing Options
        dto.setNotifySubscribers(entity.getNotifySubscribers());
        dto.setPublishToFeed(entity.getPublishToFeed());

        // Content Rating
        dto.setContentRating(entity.getContentRating());

        // Geographic Information
        dto.setRecordingLocation(entity.getRecordingLocation());
        dto.setVideoLatitude(entity.getVideoLatitude());
        dto.setVideoLongitude(entity.getVideoLongitude());

        // Video Statistics Options
        dto.setPublicStatsViewable(entity.getPublicStatsViewable());

        // Community Settings
        dto.setAllowEmbedding(entity.getAllowEmbedding());
        dto.setAllowVideoResponses(entity.getAllowVideoResponses());

        // Video Chapters
        if (entity.getVideoChapters() != null && !entity.getVideoChapters().isEmpty()) {
            List<VideoChapterDTO> chapterDTOs = entity.getVideoChapters().stream()
                    .map(this::chapterToDTO)
                    .collect(Collectors.toList());
            dto.setVideoChapters(chapterDTOs);
        }

        // Create recording details for backward compatibility
        dto.createRecordingDetails();

        return dto;
    }

    /**
     * Converts a VideoMetadataDTO to a VideoMetadata entity.
     *
     * @param dto The VideoMetadataDTO to convert.
     * @return The corresponding VideoMetadata entity, or null if the DTO is null.
     */
    public VideoMetadata toEntity(VideoMetadataDTO dto) {
        if (dto == null) {
            return null;
        }

        // Merge recording details for backward compatibility before mapping
        dto.mergeRecordingDetails();

        VideoMetadata entity = new VideoMetadata();

        // Map all fields from DTO to Entity, with null checks and defaults
        updateEntity(entity, dto);

        return entity;
    }

    /**
     * Updates an existing VideoMetadata entity from a VideoMetadataDTO.
     *
     * @param entity The entity to be updated.
     * @param dto    The DTO containing the new data.
     */
    public void updateEntity(VideoMetadata entity, VideoMetadataDTO dto) {
        if (entity == null || dto == null) {
            return;
        }

        // Merge recording details for backward compatibility
        dto.mergeRecordingDetails();

        // Map fields with checks for null values to avoid overwriting with nulls unnecessarily
        if (dto.getTitle() != null) entity.setTitle(dto.getTitle());
        if (dto.getDescription() != null) entity.setDescription(dto.getDescription());
        if (dto.getTags() != null) entity.setTags(dto.getTags());
        else entity.setTags(new HashSet<>());
        entity.setThumbnailUrl(dto.getThumbnailUrl());
        if (dto.getCategory() != null) entity.setCategory(dto.getCategory());
        if (dto.getLanguage() != null) entity.setLanguage(dto.getLanguage());
        if (dto.getPrivacyStatus() != null) entity.setPrivacyStatus(dto.getPrivacyStatus());
        if (dto.getAgeRestriction() != null) entity.setAgeRestriction(dto.getAgeRestriction());
        if (dto.getMadeForKids() != null) entity.setMadeForKids(dto.getMadeForKids());
        entity.setLocationDescription(dto.getLocationDescription());
        entity.setRecordingDate(dto.getRecordingDate());
        if (dto.getLicense() != null) entity.setLicense(dto.getLicense());
        entity.setYoutubeChannelId(dto.getYoutubeChannelId());
        entity.setYoutubeChannelName(dto.getYoutubeChannelName());
        if (dto.getIsShort() != null) entity.setIsShort(dto.getIsShort());
        entity.setShortHashtags(dto.getShortHashtags());
        if (dto.getMonetization() != null) entity.setMonetization(dto.getMonetization());
        if (dto.getCommentsEnabled() != null) entity.setCommentsEnabled(dto.getCommentsEnabled());
        if (dto.getRatingsEnabled() != null) entity.setRatingsEnabled(dto.getRatingsEnabled());
        entity.setScheduledPublishTime(dto.getScheduledPublishTime());
        if (dto.getPlaylistIds() != null) entity.setPlaylistIds(dto.getPlaylistIds());
        else entity.setPlaylistIds(new HashSet<>());
        entity.setEndScreen(dto.getEndScreen());
        entity.setCards(dto.getCards());
        entity.setCustomThumbnailUrl(dto.getCustomThumbnailUrl());
        if (dto.getKeywords() != null) entity.setKeywords(dto.getKeywords());
        else entity.setKeywords(new HashSet<>());
        if (dto.getAutoGeneratedCaptions() != null) entity.setAutoGeneratedCaptions(dto.getAutoGeneratedCaptions());
        if (dto.getDefaultAudioLanguage() != null) entity.setDefaultAudioLanguage(dto.getDefaultAudioLanguage());
        if (dto.getNotifySubscribers() != null) entity.setNotifySubscribers(dto.getNotifySubscribers());
        if (dto.getPublishToFeed() != null) entity.setPublishToFeed(dto.getPublishToFeed());
        entity.setContentRating(dto.getContentRating());
        entity.setRecordingLocation(dto.getRecordingLocation());
        entity.setVideoLatitude(dto.getVideoLatitude());
        entity.setVideoLongitude(dto.getVideoLongitude());
        if (dto.getPublicStatsViewable() != null) entity.setPublicStatsViewable(dto.getPublicStatsViewable());
        if (dto.getAllowEmbedding() != null) entity.setAllowEmbedding(dto.getAllowEmbedding());
        if (dto.getAllowVideoResponses() != null) entity.setAllowVideoResponses(dto.getAllowVideoResponses());

        // Video Type with error handling
        if (dto.getVideoType() != null) {
            try {
                entity.setVideoType(VideoType.valueOf(dto.getVideoType().toUpperCase()));
            } catch (IllegalArgumentException e) {
                // Keep existing value or set a default if the DTO value is invalid
            }
        }

        // Video Chapters - Replace existing chapters with new ones
        if (dto.getVideoChapters() != null) {
            entity.getVideoChapters().clear();
            List<VideoChapter> chapters = dto.getVideoChapters().stream()
                    .map(chapterDTO -> chapterToEntity(chapterDTO, entity))
                    .collect(Collectors.toList());
            entity.getVideoChapters().addAll(chapters);
        }
    }

    // --- Private Helper Methods ---

    private VideoChapterDTO chapterToDTO(VideoChapter entity) {
        if (entity == null) return null;
        VideoChapterDTO dto = new VideoChapterDTO();
        dto.setOrder(entity.getOrder());
        dto.setTitle(entity.getTitle());
        dto.setTimestamp(entity.getTimestamp());
        return dto;
    }

    private VideoChapter chapterToEntity(VideoChapterDTO dto, VideoMetadata videoMetadata) {
        if (dto == null) return null;
        VideoChapter entity = new VideoChapter();
        entity.setTitle(dto.getTitle());
        entity.setTimestamp(dto.getTimestamp());
        entity.setVideoMetadata(videoMetadata);
        entity.setOrder(dto.getOrder());
        return entity;
    }
}