# Server Configuration
server.port=8080
server.servlet.context-path=/
# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/ytms_db
spring.datasource.username=ytms_user
spring.datasource.password=ytms_password
spring.datasource.driver-class-name=org.postgresql.Driver
# JPA/Hibernate Configuration
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jackson.serialization.fail-on-empty-beans=false
spring.jpa.open-in-view=false
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
# Connection Pool Configuration
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000
# JSON Configuration
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
# JWT Configuration
jwt.secret=Vx9uN!6t^QmZx@5Kj#WmRgUvTxZzQmBnKyXyZtUwGhXyKuTrMzBxZqLpAvGtRwTn
jwt.expiration=86400
# Logging Configuration
logging.level.com.insp17.ytms=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=when-authorized
# CORS Configuration (if needed beyond SecurityConfig)
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
# Gmail SMTP Settings
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=ytemailtestuser@gmail.com
spring.mail.password=ggcu qcur udhx zotk
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
spring.mail.from=ytemailtestuser@gmail.com
# Application Configuration
app.name=YouTube Video Management System
app.version=1.0.0
# File Storage Configuration
deployed.at=GCP
gcp.project-id=inspire26
gcp.bucket-name=ytmthelper-inspire26
gcp.public.bucket-name=ytmthelper-inspire26-pub
gcp.service-account-key-path=/Users/aj/projects/servicekey/inspire26-d6968a54a807.json
# File Upload Configuration - Updated for 10GB support
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10GB
spring.servlet.multipart.max-request-size=10GB
spring.servlet.multipart.resolve-lazily=true
# Tomcat configuration for large files
server.tomcat.max-swallow-size=10GB
server.tomcat.max-http-post-size=10GB
# Connection timeout for large uploads (30 minutes)
server.tomcat.connection-timeout=1800000
# ===================================================================
# Spring Cache Configuration (to use Redis)
# ===================================================================
# This tells Spring Boot to use Redis for its caching abstraction.
spring.cache.type=redis
# Redis
#spring.redis.host=${redis_host}
#spring.redis.port=${redis_port}
#spring.redis.password=${redis_pass}
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.password=abhijith_pass


# ===================================================================
# Bucket4j Rate Limiting Configuration (for v0.11.0+)
# ===================================================================
# Enable the Bucket4j starter
bucket4j.enabled=true
bucket4j.cache-to-use=redis
# --- Filter 1: IP-Based Rate Limiting for Public Invite Endpoints ---
bucket4j.filters[0].cache-name=buckets
bucket4j.filters[0].filter-method=servlet
bucket4j.filters[0].url=^/api/auth/(validate-token|accept-invite)/.*
bucket4j.filters[0].strategy=first
bucket4j.filters[0].http-response-body={"message": "Too many requests. Please try again later."}
# The expression and execute-on-methods are moved to the filter level
bucket4j.filters[0].expression=getRemoteAddr()
bucket4j.filters[0].execute-on-methods=GET,POST
# Define a more aggressive rate limit for easier testing: 5 requests per 10 seconds.
bucket4j.filters[0].rate-limits[0].bandwidths[0].capacity=5
bucket4j.filters[0].rate-limits[0].bandwidths[0].time=10
bucket4j.filters[0].rate-limits[0].bandwidths[0].unit=seconds
# --- Filter 2: User-Based Rate Limiting for Sending Invites ---
bucket4j.filters[1].cache-name=buckets
bucket4j.filters[1].filter-method=servlet
bucket4j.filters[1].url=/api/team/invite
bucket4j.filters[1].strategy=first
bucket4j.filters[1].http-response-body={"message": "You have sent too many invitations. Please try again later."}
# The expression and execute-on-methods are moved to the filter level
bucket4j.filters[1].expression=getPrincipalName()
bucket4j.filters[1].execute-on-methods=POST
# Define the rate limit: 20 invitations per hour for a single user.
bucket4j.filters[1].rate-limits[0].bandwidths[0].capacity=20
bucket4j.filters[1].rate-limits[0].bandwidths[0].time=1
bucket4j.filters[1].rate-limits[0].bandwidths[0].unit=hours
