import React, { useState, useEffect } from 'react';
import { X, Youtube, AlertCircle, Settings, Search, Film, Globe, MessageSquare, Share2, PlusCircle } from 'lucide-react';

const SingleRevisionMetadataModal = ({
  isOpen,
  onClose,
  onSubmit,
  revision,
  initialData
}) => {
  // --- STATE MANAGEMENT ---
  const getInitialFormData = () => ({
    // Basic Info
    title: '',
    description: '',
    tags: '',
    thumbnailUrl: '',
    customThumbnail: null,
    customThumbnailUrl: '',

    // Video Settings
    category: '24', // Default to "Entertainment"
    privacyStatus: 'PUBLIC',
    language: 'en',
    madeForKids: false,
    ageRestriction: false,
    license: 'YouTube Standard License',
    videoType: 'MAIN',
    isShort: false,
    shortHashtags: '',

    // Publishing & Channel
    scheduledPublishTime: '',
    playlistIds: '',
    notifySubscribers: true,
    publishToFeed: true,

    // Advanced Features
    endScreen: '', // Typically JSON
    cards: '', // Typically JSON

    // SEO & Discoverability
    keywords: '',

    // Captions & Subtitles
    autoGeneratedCaptions: true,
    defaultAudioLanguage: 'en',

    // Community & Content
    monetization: true,
    commentsEnabled: true,
    ratingsEnabled: true,
    contentRating: '',
    allowEmbedding: true,
    allowVideoResponses: false,
    publicStatsViewable: true,

    // Geographic & Recording
    locationDescription: '',
    recordingDate: '',
    recordingLocation: '',
    videoLatitude: '',
    videoLongitude: '',

    // Chapters
    videoChapters: [{ title: '', startTime: '00:00' }], // Updated initial state for chapters
  });

  const [formData, setFormData] = useState(getInitialFormData());
  const [isSubmitting, setIsSubmitting] = useState(false);

  // --- DATA POPULATION ---
  useEffect(() => {
    if (isOpen) {
      if (initialData) {
        // Defensively ensure videoChapters is always an array.
        let initialChapters = [];
        if (Array.isArray(initialData.videoChapters) && initialData.videoChapters.length > 0) {
            // Deep copy to avoid prop mutation.
            try {
                initialChapters = JSON.parse(JSON.stringify(initialData.videoChapters));
                if (initialChapters[0].startTime !== '00:00') {
                    initialChapters[0].startTime = '00:00';
                }
            } catch (e) {
                console.error("Failed to parse videoChapters, resetting.", e);
                initialChapters = [{ title: '', startTime: '00:00' }];
            }
        } else {
            // If no chapters, not an array, or empty, start with one empty chapter at 00:00.
            initialChapters = [{ title: '', startTime: '00:00' }];
        }

        // Populate form with existing data
        setFormData({
          title: initialData.title || '',
          description: initialData.description || '',
          tags: Array.isArray(initialData.tags) ? initialData.tags.join(', ') : (initialData.tags || ''),
          thumbnailUrl: initialData.thumbnailUrl || '',
          customThumbnailUrl: initialData.customThumbnailUrl || '',
          customThumbnail: null,
          category: initialData.category || '24',
          privacyStatus: initialData.privacyStatus || 'PUBLIC',
          language: initialData.language || 'en',
          madeForKids: initialData.madeForKids || false,
          ageRestriction: initialData.ageRestriction || false,
          license: initialData.license || 'YouTube Standard License',
          videoType: initialData.videoType || 'MAIN',
          isShort: initialData.isShort || false,
          shortHashtags: initialData.shortHashtags || '',
          scheduledPublishTime: initialData.scheduledPublishTime ? initialData.scheduledPublishTime.substring(0, 16) : '',
          playlistIds: Array.isArray(initialData.playlistIds) ? initialData.playlistIds.join(', ') : (initialData.playlistIds || ''),
          notifySubscribers: initialData.notifySubscribers !== undefined ? initialData.notifySubscribers : true,
          publishToFeed: initialData.publishToFeed !== undefined ? initialData.publishToFeed : true,
          endScreen: initialData.endScreen || '',
          cards: initialData.cards || '',
          keywords: Array.isArray(initialData.keywords) ? initialData.keywords.join(', ') : (initialData.keywords || ''),
          autoGeneratedCaptions: initialData.autoGeneratedCaptions !== undefined ? initialData.autoGeneratedCaptions : true,
          defaultAudioLanguage: initialData.defaultAudioLanguage || 'en',
          monetization: initialData.monetization !== undefined ? initialData.monetization : true,
          commentsEnabled: initialData.commentsEnabled !== undefined ? initialData.commentsEnabled : true,
          ratingsEnabled: initialData.ratingsEnabled !== undefined ? initialData.ratingsEnabled : true,
          contentRating: initialData.contentRating || '',
          allowEmbedding: initialData.allowEmbedding !== undefined ? initialData.allowEmbedding : true,
          allowVideoResponses: initialData.allowVideoResponses || false,
          publicStatsViewable: initialData.publicStatsViewable !== undefined ? initialData.publicStatsViewable : true,
          locationDescription: initialData.locationDescription || '',
          recordingDate: initialData.recordingDate || '',
          recordingLocation: initialData.recordingLocation || '',
          videoLatitude: initialData.videoLatitude || '',
          videoLongitude: initialData.videoLongitude || '',
          videoChapters: initialChapters,
        });
      } else {
        // Reset form for new metadata entry
        setFormData(getInitialFormData());
      }
    }
  }, [isOpen, initialData]);

  // --- EVENT HANDLERS ---
  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleFileChange = (e) => {
    const { name, files } = e.target;
    if (files.length > 0) {
      setFormData(prev => ({ ...prev, [name]: files[0] }));
    }
  };

  const handleChapterChange = (index, field, value) => {
    const newChapters = [...formData.videoChapters];
    if (index === 0 && field === 'startTime') return; // First chapter timestamp is locked
    newChapters[index][field] = value;
    setFormData(prev => ({ ...prev, videoChapters: newChapters }));
  };

  const addChapter = () => {
    setFormData(prev => ({
      ...prev,
      videoChapters: [...prev.videoChapters, { title: '', startTime: '' }]
    }));
  };

  const removeChapter = (index) => {
    if (index === 0) return; // Cannot remove the first chapter
    const newChapters = formData.videoChapters.filter((_, i) => i !== index);
    setFormData(prev => ({ ...prev, videoChapters: newChapters }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!formData.title.trim()) {
      alert('Title is required');
      return;
    }

    // Validate chapters before submitting
    const chaptersToSubmit = formData.videoChapters.filter(ch => ch.title.trim() && ch.startTime.trim());
    if (chaptersToSubmit.length > 0 && chaptersToSubmit.length < 3) {
      alert('If you add chapters, you must provide at least 3 for them to work on YouTube.');
      return;
    }
    
    setIsSubmitting(true);
    try {
      const metadataToSubmit = {
        ...formData,
        tags: formData.tags.split(',').map(tag => tag.trim()).filter(tag => tag),
        playlistIds: formData.playlistIds.split(',').map(id => id.trim()).filter(id => id),
        keywords: formData.keywords.split(',').map(kw => kw.trim()).filter(kw => kw),
        videoChapters: chaptersToSubmit,
        videoLatitude: formData.videoLatitude === '' ? null : parseFloat(formData.videoLatitude),
        videoLongitude: formData.videoLongitude === '' ? null : parseFloat(formData.videoLongitude),
      };
      
      await onSubmit(metadataToSubmit);
      onClose();
    } catch (error) {
      console.error('Failed to submit metadata:', error);
      alert(`Error submitting metadata: ${error.message || 'Please check console for details.'}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  // --- RENDER ---
  const renderSection = (title, icon, children) => (
    <div className="border border-gray-200 rounded-lg p-4">
      <h4 className="text-md font-semibold text-gray-800 flex items-center space-x-2 mb-4">
        {icon}
        <span>{title}</span>
      </h4>
      <div className="space-y-4">{children}</div>
    </div>
  );

  return (
    <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-50 rounded-lg shadow-2xl w-full max-w-4xl max-h-[95vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-5 border-b border-gray-200 bg-white rounded-t-lg">
          <div className="flex items-center space-x-3">
            <Youtube className="h-6 w-6 text-red-600" />
            <h3 className="text-xl font-semibold text-gray-900">
              YouTube Metadata - Revision #{revision?.revisionNumber}
            </h3>
          </div>
          <button onClick={onClose} className="text-gray-400 hover:text-gray-600 p-1 rounded-full hover:bg-gray-100">
            <X className="h-6 w-6" />
          </button>
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 space-y-6 overflow-y-auto">
          {/* --- REQUIRED INFO --- */}
          {renderSection("Required Information", <AlertCircle className="h-5 w-5 text-red-500" />,
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Title *</label>
                <input type="text" name="title" value={formData.title} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter video title..." required maxLength={100} />
                <p className="text-xs text-gray-500 mt-1 text-right">{formData.title.length}/100</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea name="description" value={formData.description} onChange={handleInputChange} rows={5} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Tell viewers about your video..." maxLength={5000} />
                <p className="text-xs text-gray-500 mt-1 text-right">{formData.description.length}/5000</p>
              </div>
            </>
          )}

          {/* --- VIDEO DETAILS --- */}
          {renderSection("Video Details", <Film className="h-5 w-5 text-purple-600" />,
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select name="category" value={formData.category} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white">
                  <option value="24">Entertainment</option><option value="1">Film & Animation</option><option value="2">Autos & Vehicles</option><option value="10">Music</option><option value="15">Pets & Animals</option><option value="17">Sports</option><option value="19">Travel & Events</option><option value="20">Gaming</option><option value="22">People & Blogs</option><option value="23">Comedy</option><option value="25">News & Politics</option><option value="26">Howto & Style</option><option value="27">Education</option><option value="28">Science & Technology</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Privacy</label>
                <select name="privacyStatus" value={formData.privacyStatus} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white">
                  <option value="PUBLIC">Public</option><option value="UNLISTED">Unlisted</option><option value="PRIVATE">Private</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Language</label>
                <select name="language" value={formData.language} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white">
                  <option value="en">English</option><option value="es">Spanish</option><option value="fr">French</option><option value="de">German</option><option value="it">Italian</option><option value="pt">Portuguese</option><option value="ru">Russian</option><option value="zh">Chinese</option><option value="ja">Japanese</option><option value="ko">Korean</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">License</label>
                <input type="text" name="license" value={formData.license} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
              </div>
              <div className="col-span-1 md:col-span-2 flex items-center space-x-4 pt-2">
                 <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="madeForKids" checked={formData.madeForKids} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Made for Kids</span></label>
                 <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="ageRestriction" checked={formData.ageRestriction} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Age-Restricted</span></label>
              </div>
            </div>
          )}
          
          {/* --- SEO & DISCOVERABILITY --- */}
          {renderSection("SEO & Discoverability", <Search className="h-5 w-5 text-blue-600" />,
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Tags</label>
                <input type="text" name="tags" value={formData.tags} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="tag1, tag2, tag3..." />
                <p className="text-xs text-gray-500 mt-1">Separate with commas. Max 500 characters total.</p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Keywords</label>
                <input type="text" name="keywords" value={formData.keywords} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="keyword1, keyword2..." />
                <p className="text-xs text-gray-500 mt-1">Separate with commas. For search optimization.</p>
              </div>
            </>
          )}

          {/* --- PUBLISHING & CHANNEL --- */}
          {renderSection("Publishing", <Share2 className="h-5 w-5 text-green-600" />,
             <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Scheduled Publish Time</label>
                    <input type="datetime-local" name="scheduledPublishTime" value={formData.scheduledPublishTime} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                </div>
                 <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Playlist IDs</label>
                    <input type="text" name="playlistIds" value={formData.playlistIds} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="PL..., PL..."/>
                    <p className="text-xs text-gray-500 mt-1">Separate with commas.</p>
                </div>
                <div className="col-span-1 md:col-span-2 flex items-center space-x-4 pt-2">
                    <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="notifySubscribers" checked={formData.notifySubscribers} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Notify Subscribers</span></label>
                    <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="publishToFeed" checked={formData.publishToFeed} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Publish to Feed</span></label>
                </div>
             </div>
          )}

          {/* --- COMMUNITY & CONTENT --- */}
          {renderSection("Community & Content", <MessageSquare className="h-5 w-5 text-teal-600" />,
            <div className="grid grid-cols-1 md:grid-cols-2 gap-x-4 gap-y-2">
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="monetization" checked={formData.monetization} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Enable Monetization</span></label>
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="commentsEnabled" checked={formData.commentsEnabled} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Enable Comments</span></label>
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="ratingsEnabled" checked={formData.ratingsEnabled} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Enable Ratings</span></label>
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="allowEmbedding" checked={formData.allowEmbedding} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Allow Embedding</span></label>
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="allowVideoResponses" checked={formData.allowVideoResponses} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Allow Video Responses</span></label>
                <label className="flex items-center space-x-2 cursor-pointer"><input type="checkbox" name="publicStatsViewable" checked={formData.publicStatsViewable} onChange={handleInputChange} className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" /><span className="text-sm text-gray-700">Public Stats Viewable</span></label>
            </div>
          )}

           {/* --- GEOGRAPHIC & RECORDING --- */}
          {renderSection("Geographic & Recording", <Globe className="h-5 w-5 text-orange-600" />,
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Recording Date</label>
                <input type="date" name="recordingDate" value={formData.recordingDate} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Location Description</label>
                <input type="text" name="locationDescription" value={formData.locationDescription} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., Conference Hall A" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Latitude</label>
                <input type="number" step="any" name="videoLatitude" value={formData.videoLatitude} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., -37.8136" />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Longitude</label>
                <input type="number" step="any" name="videoLongitude" value={formData.videoLongitude} onChange={handleInputChange} className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="e.g., 144.9631" />
              </div>
            </div>
          )}

          {/* --- ADVANCED --- */}
          {renderSection("Advanced Features", <Settings className="h-5 w-5 text-gray-600" />,
            <>
              <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Video Chapters</label>
                  <p className="text-xs text-gray-500 mt-1 mb-2">The first chapter must start at 00:00. A minimum of 3 chapters is required for the feature to work on YouTube.</p>
                  <div className="space-y-2">
                      {Array.isArray(formData.videoChapters) && formData.videoChapters.map((chapter, index) => (
                          <div key={index} className="flex items-center space-x-2">
                              <input
                                  type="text"
                                  value={chapter.title}
                                  onChange={(e) => handleChapterChange(index, 'title', e.target.value)}
                                  placeholder={`Chapter ${index + 1} Title`}
                                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                              />
                              <input
                                  type="text"
                                  value={chapter.startTime}
                                  onChange={(e) => handleChapterChange(index, 'startTime', e.target.value)}
                                  placeholder="00:00"
                                  className="w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  disabled={index === 0}
                              />
                              <button
                                  type="button"
                                  onClick={() => removeChapter(index)}
                                  disabled={index === 0}
                                  className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-100 rounded-full disabled:text-gray-300 disabled:hover:bg-transparent disabled:cursor-not-allowed"
                              >
                                  <X className="h-5 w-5" />
                              </button>
                          </div>
                      ))}
                  </div>
                  <button
                      type="button"
                      onClick={addChapter}
                      className="mt-3 flex items-center space-x-2 px-3 py-1.5 text-sm font-medium text-blue-600 border border-blue-500 rounded-md hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-400"
                  >
                      <PlusCircle className="h-4 w-4" />
                      <span>Add Chapter</span>
                  </button>
              </div>
              <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Custom Thumbnail</label>
                  <input type="file" name="customThumbnail" onChange={handleFileChange} accept="image/jpeg,image/png" className="w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" />
              </div>
            </>
          )}

        </form>

        {/* Footer / Action Buttons */}
        <div className="flex justify-end space-x-3 p-5 border-t border-gray-200 bg-gray-100 rounded-b-lg">
          <button type="button" onClick={onClose} className="px-5 py-2.5 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
            Cancel
          </button>
          <button
            type="button"
            onClick={handleSubmit}
            disabled={isSubmitting || !formData.title.trim()}
            className="px-5 py-2.5 text-sm font-medium bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
          >
            {isSubmitting ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                <span>Saving...</span>
              </>
            ) : (
              <>
                <Youtube className="h-4 w-4" />
                <span>Save Metadata</span>
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default SingleRevisionMetadataModal;
